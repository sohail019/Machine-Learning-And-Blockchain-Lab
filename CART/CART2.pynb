import numpy as np

# Sample dataset (features)
X = np.array([[2, 3], [5, 4], [9, 6], [4, 7], [8, 1], [7, 2]])
# Corresponding target labels (0 for class A, 1 for class B)
y = np.array([0, 1, 0, 1, 1, 0])

class DecisionTree:
    def __init__(self, max_depth=None):
        self.max_depth = max_depth

    def fit(self, X, y, depth=0):
        num_samples, num_features = X.shape
        unique_classes, num_unique_classes = np.unique(y, return_counts=True)

# Check if only one class remains or the tree depth limit is reached
        if num_unique_classes == 1 or (self.max_depth and depth == self.max_depth):
            return unique_classes[0]

        # If there are no more features to split or all samples belong to one class
        if num_features == 0 or num_unique_classes == 1:
            return unique_classes[np.argmax(num_unique_classes)]

        # Find the best split
        best_split = self.find_best_split(X, y)
        if best_split is None:
            return unique_classes[np.argmax(num_unique_classes)]

 # Recursive splitting
        feature_idx, threshold = best_split
        left_mask = X[:, feature_idx] <= threshold
        right_mask = ~left_mask
        left_subtree = self.fit(X[left_mask], y[left_mask], depth + 1)
        right_subtree = self.fit(X[right_mask], y[right_mask], depth + 1)

        return (feature_idx, threshold, left_subtree, right_subtree)
